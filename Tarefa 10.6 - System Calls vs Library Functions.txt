Matheus Augusto de Souza
mataugusto1999@gmail.com


Tarefa 6 -
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <math.h>
#include <time.h>


int main(int argc, char *argv[]) {
  unsigned long N = 1763; // o composto que queremos fatorar
  int status;


  pid_t r = fork();
  if (r < 0) { perror("fork"); exit(1); }


  if (r == 0) {
    printf("processo-filho: rodando...\n");
    time_t t = time(NULL);
    
    if (0 == t % 2) {
      for (int i = 2; i < sqrt(N); ++i) {
        if (0 == N % i) {
          printf("processo-filho: fator encontrado\n");
          exit(i);
        }
      }
    }
    else {
      for (int i = N - 1; i >= 2; --i) {
        if (0 == N % i) {
          printf("processo-filho: fator encontrado\n");
          exit(i);
        }
      }
    }
    printf("processo-filho: fator não encontrado\n");
    exit(1); // processo-filho morre aqui de qualquer forma
  }
    if (wait(&status) != r) 
    exit(1);
  printf("processo-pai: fim\n");
  return 0;
  
}


As system calls do programa e suas funções:
Primeiramente utilizamos a system call ‘fork’ para duplicar o 
processo, e logo que os duplicamos, analisamos os processos 
(pai e filho) para saber se são maiores ou iguais a zero, e caso 
o ‘r’ seja menor que zero é retornado um erro para mostrar que é 
impossível que um processo fork seja negativo.


A system call ‘exit’ já nos vai dar a possibilidade do processo 
parar de ser executado, o encadeamento de execução para de ser 
executado na máquina. Podemos chamar o processo por “processo 
morto” após chamarmos a system call ‘exit’ no seu fim.


Por último, a system call ‘wait’ que faz com que o processo ‘pai’ 
espere o processo ‘filho’ concluir sua execução para serem 
encerrados juntos, já que cada um faz seu processo independente 
um do outro.